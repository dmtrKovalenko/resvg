// This file is autogenerated. Do not edit it!
// See ./codegen for details.

use proc_macro2::TokenStream;
use quote::{quote, ToTokens};
use std::fmt;

#[derive(Clone, Copy, PartialEq)]
pub enum EId {
    A,
    Circle,
    ClipPath,
    Defs,
    Ellipse,
    FeBlend,
    FeColorMatrix,
    FeComponentTransfer,
    FeComposite,
    FeConvolveMatrix,
    FeDiffuseLighting,
    FeDisplacementMap,
    FeDistantLight,
    FeDropShadow,
    FeFlood,
    FeFuncA,
    FeFuncB,
    FeFuncG,
    FeFuncR,
    FeGaussianBlur,
    FeImage,
    FeMerge,
    FeMergeNode,
    FeMorphology,
    FeOffset,
    FePointLight,
    FeSpecularLighting,
    FeSpotLight,
    FeTile,
    FeTurbulence,
    Filter,
    G,
    Image,
    Line,
    LinearGradient,
    Marker,
    Mask,
    Path,
    Pattern,
    Polygon,
    Polyline,
    RadialGradient,
    Rect,
    Stop,
    Style,
    Svg,
    Switch,
    Symbol,
    Text,
    TextPath,
    Tref,
    Tspan,
    Use,
}

impl ToTokens for EId {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        match self {
            EId::A => quote! {EId::A},
            EId::Circle => quote! {EId::Circle},
            EId::ClipPath => quote! {EId::ClipPath},
            EId::Defs => quote! {EId::Defs},
            EId::Ellipse => quote! {EId::Ellipse},
            EId::FeBlend => quote! {EId::FeBlend},
            EId::FeColorMatrix => quote! {EId::FeColorMatrix},
            EId::FeComponentTransfer => quote! {EId::FeComponentTransfer},
            EId::FeComposite => quote! {EId::FeComposite},
            EId::FeConvolveMatrix => quote! {EId::FeConvolveMatrix},
            EId::FeDiffuseLighting => quote! {EId::FeDiffuseLighting},
            EId::FeDisplacementMap => quote! {EId::FeDisplacementMap},
            EId::FeDistantLight => quote! {EId::FeDistantLight},
            EId::FeDropShadow => quote! {EId::FeDropShadow},
            EId::FeFlood => quote! {EId::FeFlood},
            EId::FeFuncA => quote! {EId::FeFuncA},
            EId::FeFuncB => quote! {EId::FeFuncB},
            EId::FeFuncG => quote! {EId::FeFuncG},
            EId::FeFuncR => quote! {EId::FeFuncR},
            EId::FeGaussianBlur => quote! {EId::FeGaussianBlur},
            EId::FeImage => quote! {EId::FeImage},
            EId::FeMerge => quote! {EId::FeMerge},
            EId::FeMergeNode => quote! {EId::FeMergeNode},
            EId::FeMorphology => quote! {EId::FeMorphology},
            EId::FeOffset => quote! {EId::FeOffset},
            EId::FePointLight => quote! {EId::FePointLight},
            EId::FeSpecularLighting => quote! {EId::FeSpecularLighting},
            EId::FeSpotLight => quote! {EId::FeSpotLight},
            EId::FeTile => quote! {EId::FeTile},
            EId::FeTurbulence => quote! {EId::FeTurbulence},
            EId::Filter => quote! {EId::Filter},
            EId::G => quote! {EId::G},
            EId::Image => quote! {EId::Image},
            EId::Line => quote! {EId::Line},
            EId::LinearGradient => quote! {EId::LinearGradient},
            EId::Marker => quote! {EId::Marker},
            EId::Mask => quote! {EId::Mask},
            EId::Path => quote! {EId::Path},
            EId::Pattern => quote! {EId::Pattern},
            EId::Polygon => quote! {EId::Polygon},
            EId::Polyline => quote! {EId::Polyline},
            EId::RadialGradient => quote! {EId::RadialGradient},
            EId::Rect => quote! {EId::Rect},
            EId::Stop => quote! {EId::Stop},
            EId::Style => quote! {EId::Style},
            EId::Svg => quote! {EId::Svg},
            EId::Switch => quote! {EId::Switch},
            EId::Symbol => quote! {EId::Symbol},
            EId::Text => quote! {EId::Text},
            EId::TextPath => quote! {EId::TextPath},
            EId::Tref => quote! {EId::Tref},
            EId::Tspan => quote! {EId::Tspan},
            EId::Use => quote! {EId::Use},
        }
        .to_tokens(tokens)
    }
}

static ELEMENTS: Map<EId> = Map {
    key: 732231254413039614,
    disps: &[
        (0, 12),
        (1, 11),
        (10, 26),
        (2, 42),
        (1, 19),
        (0, 5),
        (1, 13),
        (8, 50),
        (0, 0),
        (1, 0),
        (7, 45),
    ],
    entries: &[
        ("feFlood", EId::FeFlood),
        ("radialGradient", EId::RadialGradient),
        ("feImage", EId::FeImage),
        ("stop", EId::Stop),
        ("fePointLight", EId::FePointLight),
        ("feConvolveMatrix", EId::FeConvolveMatrix),
        ("feComposite", EId::FeComposite),
        ("clipPath", EId::ClipPath),
        ("feMerge", EId::FeMerge),
        ("defs", EId::Defs),
        ("mask", EId::Mask),
        ("svg", EId::Svg),
        ("symbol", EId::Symbol),
        ("linearGradient", EId::LinearGradient),
        ("feSpecularLighting", EId::FeSpecularLighting),
        ("feFuncB", EId::FeFuncB),
        ("filter", EId::Filter),
        ("feFuncG", EId::FeFuncG),
        ("circle", EId::Circle),
        ("g", EId::G),
        ("tref", EId::Tref),
        ("feFuncA", EId::FeFuncA),
        ("image", EId::Image),
        ("text", EId::Text),
        ("line", EId::Line),
        ("pattern", EId::Pattern),
        ("use", EId::Use),
        ("feDropShadow", EId::FeDropShadow),
        ("feSpotLight", EId::FeSpotLight),
        ("marker", EId::Marker),
        ("style", EId::Style),
        ("switch", EId::Switch),
        ("tspan", EId::Tspan),
        ("feColorMatrix", EId::FeColorMatrix),
        ("feOffset", EId::FeOffset),
        ("path", EId::Path),
        ("feGaussianBlur", EId::FeGaussianBlur),
        ("feTile", EId::FeTile),
        ("feTurbulence", EId::FeTurbulence),
        ("feMergeNode", EId::FeMergeNode),
        ("feMorphology", EId::FeMorphology),
        ("a", EId::A),
        ("textPath", EId::TextPath),
        ("ellipse", EId::Ellipse),
        ("feComponentTransfer", EId::FeComponentTransfer),
        ("feDistantLight", EId::FeDistantLight),
        ("polyline", EId::Polyline),
        ("polygon", EId::Polygon),
        ("feBlend", EId::FeBlend),
        ("feDisplacementMap", EId::FeDisplacementMap),
        ("feDiffuseLighting", EId::FeDiffuseLighting),
        ("rect", EId::Rect),
        ("feFuncR", EId::FeFuncR),
    ],
};

impl EId {
    pub fn from_str(text: &str) -> Option<EId> {
        ELEMENTS.get(text).cloned()
    }

    #[inline(never)]
    pub fn to_str(self) -> &'static str {
        ELEMENTS.key(&self)
    }
}

impl fmt::Debug for EId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.to_str())
    }
}

impl fmt::Display for EId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

#[derive(Clone, Copy, PartialEq)]
pub enum AId {
    AlignmentBaseline,
    Amplitude,
    Azimuth,
    BaseFrequency,
    BaselineShift,
    Bias,
    Class,
    Clip,
    ClipPath,
    ClipRule,
    ClipPathUnits,
    Color,
    ColorInterpolation,
    ColorInterpolationFilters,
    ColorProfile,
    ColorRendering,
    Cx,
    Cy,
    D,
    DiffuseConstant,
    Direction,
    Display,
    Divisor,
    DominantBaseline,
    Dx,
    Dy,
    EdgeMode,
    Elevation,
    EnableBackground,
    Exponent,
    Fill,
    FillOpacity,
    FillRule,
    Filter,
    FilterUnits,
    FloodColor,
    FloodOpacity,
    Font,
    FontFamily,
    FontFeatureSettings,
    FontKerning,
    FontSize,
    FontSizeAdjust,
    FontStretch,
    FontStyle,
    FontSynthesis,
    FontVariant,
    FontVariantCaps,
    FontVariantEastAsian,
    FontVariantLigatures,
    FontVariantNumeric,
    FontVariantPosition,
    FontWeight,
    Fx,
    Fy,
    GlyphOrientationHorizontal,
    GlyphOrientationVertical,
    GradientTransform,
    GradientUnits,
    Height,
    Href,
    Id,
    ImageRendering,
    In,
    In2,
    InlineSize,
    Intercept,
    Isolation,
    K1,
    K2,
    K3,
    K4,
    KernelMatrix,
    KernelUnitLength,
    Kerning,
    LengthAdjust,
    LetterSpacing,
    LightingColor,
    LimitingConeAngle,
    LineHeight,
    MarkerEnd,
    MarkerMid,
    MarkerStart,
    MarkerHeight,
    MarkerUnits,
    MarkerWidth,
    Mask,
    MaskContentUnits,
    MaskUnits,
    MixBlendMode,
    Mode,
    NumOctaves,
    Offset,
    Opacity,
    Operator,
    Order,
    Orient,
    Overflow,
    PaintOrder,
    Path,
    PathLength,
    PatternContentUnits,
    PatternTransform,
    PatternUnits,
    Points,
    PointsAtX,
    PointsAtY,
    PointsAtZ,
    PreserveAlpha,
    PreserveAspectRatio,
    PrimitiveUnits,
    R,
    Radius,
    RefX,
    RefY,
    RequiredExtensions,
    RequiredFeatures,
    Result,
    Rotate,
    Rx,
    Ry,
    Scale,
    Seed,
    ShapeImageThreshold,
    ShapeInside,
    ShapeMargin,
    ShapePadding,
    ShapeRendering,
    ShapeSubtract,
    Side,
    Slope,
    Space,
    SpecularConstant,
    SpecularExponent,
    SpreadMethod,
    StartOffset,
    StdDeviation,
    StitchTiles,
    StopColor,
    StopOpacity,
    Stroke,
    StrokeDasharray,
    StrokeDashoffset,
    StrokeLinecap,
    StrokeLinejoin,
    StrokeMiterlimit,
    StrokeOpacity,
    StrokeWidth,
    Style,
    SurfaceScale,
    SystemLanguage,
    TableValues,
    TargetX,
    TargetY,
    TextAlign,
    TextAlignLast,
    TextAnchor,
    TextDecoration,
    TextDecorationColor,
    TextDecorationFill,
    TextDecorationLine,
    TextDecorationStroke,
    TextDecorationStyle,
    TextIndent,
    TextOrientation,
    TextOverflow,
    TextRendering,
    TextUnderlinePosition,
    TextLength,
    Transform,
    TransformBox,
    TransformOrigin,
    Type,
    UnicodeBidi,
    UnicodeRange,
    Values,
    VectorEffect,
    ViewBox,
    Visibility,
    WhiteSpace,
    Width,
    WordSpacing,
    WritingMode,
    X,
    X1,
    X2,
    XChannelSelector,
    Y,
    Y1,
    Y2,
    YChannelSelector,
    Z,
}

impl ToTokens for AId {
    fn to_tokens(&self, tokens: &mut TokenStream) {
        match self {
            AId::AlignmentBaseline => quote! {AId::AlignmentBaseline},
            AId::Amplitude => quote! {AId::Amplitude},
            AId::Azimuth => quote! {AId::Azimuth},
            AId::BaseFrequency => quote! {AId::BaseFrequency},
            AId::BaselineShift => quote! {AId::BaselineShift},
            AId::Bias => quote! {AId::Bias},
            AId::Class => quote! {AId::Class},
            AId::Clip => quote! {AId::Clip},
            AId::ClipPath => quote! {AId::ClipPath},
            AId::ClipRule => quote! {AId::ClipRule},
            AId::ClipPathUnits => quote! {AId::ClipPathUnits},
            AId::Color => quote! {AId::Color},
            AId::ColorInterpolation => quote! {AId::ColorInterpolation},
            AId::ColorInterpolationFilters => quote! {AId::ColorInterpolationFilters},
            AId::ColorProfile => quote! {AId::ColorProfile},
            AId::ColorRendering => quote! {AId::ColorRendering},
            AId::Cx => quote! {AId::Cx},
            AId::Cy => quote! {AId::Cy},
            AId::D => quote! {AId::D},
            AId::DiffuseConstant => quote! {AId::DiffuseConstant},
            AId::Direction => quote! {AId::Direction},
            AId::Display => quote! {AId::Display},
            AId::Divisor => quote! {AId::Divisor},
            AId::DominantBaseline => quote! {AId::DominantBaseline},
            AId::Dx => quote! {AId::Dx},
            AId::Dy => quote! {AId::Dy},
            AId::EdgeMode => quote! {AId::EdgeMode},
            AId::Elevation => quote! {AId::Elevation},
            AId::EnableBackground => quote! {AId::EnableBackground},
            AId::Exponent => quote! {AId::Exponent},
            AId::Fill => quote! {AId::Fill},
            AId::FillOpacity => quote! {AId::FillOpacity},
            AId::FillRule => quote! {AId::FillRule},
            AId::Filter => quote! {AId::Filter},
            AId::FilterUnits => quote! {AId::FilterUnits},
            AId::FloodColor => quote! {AId::FloodColor},
            AId::FloodOpacity => quote! {AId::FloodOpacity},
            AId::Font => quote! {AId::Font},
            AId::FontFamily => quote! {AId::FontFamily},
            AId::FontFeatureSettings => quote! {AId::FontFeatureSettings},
            AId::FontKerning => quote! {AId::FontKerning},
            AId::FontSize => quote! {AId::FontSize},
            AId::FontSizeAdjust => quote! {AId::FontSizeAdjust},
            AId::FontStretch => quote! {AId::FontStretch},
            AId::FontStyle => quote! {AId::FontStyle},
            AId::FontSynthesis => quote! {AId::FontSynthesis},
            AId::FontVariant => quote! {AId::FontVariant},
            AId::FontVariantCaps => quote! {AId::FontVariantCaps},
            AId::FontVariantEastAsian => quote! {AId::FontVariantEastAsian},
            AId::FontVariantLigatures => quote! {AId::FontVariantLigatures},
            AId::FontVariantNumeric => quote! {AId::FontVariantNumeric},
            AId::FontVariantPosition => quote! {AId::FontVariantPosition},
            AId::FontWeight => quote! {AId::FontWeight},
            AId::Fx => quote! {AId::Fx},
            AId::Fy => quote! {AId::Fy},
            AId::GlyphOrientationHorizontal => quote! {AId::GlyphOrientationHorizontal},
            AId::GlyphOrientationVertical => quote! {AId::GlyphOrientationVertical},
            AId::GradientTransform => quote! {AId::GradientTransform},
            AId::GradientUnits => quote! {AId::GradientUnits},
            AId::Height => quote! {AId::Height},
            AId::Href => quote! {AId::Href},
            AId::Id => quote! {AId::Id},
            AId::ImageRendering => quote! {AId::ImageRendering},
            AId::In => quote! {AId::In},
            AId::In2 => quote! {AId::In2},
            AId::InlineSize => quote! {AId::InlineSize},
            AId::Intercept => quote! {AId::Intercept},
            AId::Isolation => quote! {AId::Isolation},
            AId::K1 => quote! {AId::K1},
            AId::K2 => quote! {AId::K2},
            AId::K3 => quote! {AId::K3},
            AId::K4 => quote! {AId::K4},
            AId::KernelMatrix => quote! {AId::KernelMatrix},
            AId::KernelUnitLength => quote! {AId::KernelUnitLength},
            AId::Kerning => quote! {AId::Kerning},
            AId::LengthAdjust => quote! {AId::LengthAdjust},
            AId::LetterSpacing => quote! {AId::LetterSpacing},
            AId::LightingColor => quote! {AId::LightingColor},
            AId::LimitingConeAngle => quote! {AId::LimitingConeAngle},
            AId::LineHeight => quote! {AId::LineHeight},
            AId::MarkerEnd => quote! {AId::MarkerEnd},
            AId::MarkerMid => quote! {AId::MarkerMid},
            AId::MarkerStart => quote! {AId::MarkerStart},
            AId::MarkerHeight => quote! {AId::MarkerHeight},
            AId::MarkerUnits => quote! {AId::MarkerUnits},
            AId::MarkerWidth => quote! {AId::MarkerWidth},
            AId::Mask => quote! {AId::Mask},
            AId::MaskContentUnits => quote! {AId::MaskContentUnits},
            AId::MaskUnits => quote! {AId::MaskUnits},
            AId::MixBlendMode => quote! {AId::MixBlendMode},
            AId::Mode => quote! {AId::Mode},
            AId::NumOctaves => quote! {AId::NumOctaves},
            AId::Offset => quote! {AId::Offset},
            AId::Opacity => quote! {AId::Opacity},
            AId::Operator => quote! {AId::Operator},
            AId::Order => quote! {AId::Order},
            AId::Orient => quote! {AId::Orient},
            AId::Overflow => quote! {AId::Overflow},
            AId::PaintOrder => quote! {AId::PaintOrder},
            AId::Path => quote! {AId::Path},
            AId::PathLength => quote! {AId::PathLength},
            AId::PatternContentUnits => quote! {AId::PatternContentUnits},
            AId::PatternTransform => quote! {AId::PatternTransform},
            AId::PatternUnits => quote! {AId::PatternUnits},
            AId::Points => quote! {AId::Points},
            AId::PointsAtX => quote! {AId::PointsAtX},
            AId::PointsAtY => quote! {AId::PointsAtY},
            AId::PointsAtZ => quote! {AId::PointsAtZ},
            AId::PreserveAlpha => quote! {AId::PreserveAlpha},
            AId::PreserveAspectRatio => quote! {AId::PreserveAspectRatio},
            AId::PrimitiveUnits => quote! {AId::PrimitiveUnits},
            AId::R => quote! {AId::R},
            AId::Radius => quote! {AId::Radius},
            AId::RefX => quote! {AId::RefX},
            AId::RefY => quote! {AId::RefY},
            AId::RequiredExtensions => quote! {AId::RequiredExtensions},
            AId::RequiredFeatures => quote! {AId::RequiredFeatures},
            AId::Result => quote! {AId::Result},
            AId::Rotate => quote! {AId::Rotate},
            AId::Rx => quote! {AId::Rx},
            AId::Ry => quote! {AId::Ry},
            AId::Scale => quote! {AId::Scale},
            AId::Seed => quote! {AId::Seed},
            AId::ShapeImageThreshold => quote! {AId::ShapeImageThreshold},
            AId::ShapeInside => quote! {AId::ShapeInside},
            AId::ShapeMargin => quote! {AId::ShapeMargin},
            AId::ShapePadding => quote! {AId::ShapePadding},
            AId::ShapeRendering => quote! {AId::ShapeRendering},
            AId::ShapeSubtract => quote! {AId::ShapeSubtract},
            AId::Side => quote! {AId::Side},
            AId::Slope => quote! {AId::Slope},
            AId::Space => quote! {AId::Space},
            AId::SpecularConstant => quote! {AId::SpecularConstant},
            AId::SpecularExponent => quote! {AId::SpecularExponent},
            AId::SpreadMethod => quote! {AId::SpreadMethod},
            AId::StartOffset => quote! {AId::StartOffset},
            AId::StdDeviation => quote! {AId::StdDeviation},
            AId::StitchTiles => quote! {AId::StitchTiles},
            AId::StopColor => quote! {AId::StopColor},
            AId::StopOpacity => quote! {AId::StopOpacity},
            AId::Stroke => quote! {AId::Stroke},
            AId::StrokeDasharray => quote! {AId::StrokeDasharray},
            AId::StrokeDashoffset => quote! {AId::StrokeDashoffset},
            AId::StrokeLinecap => quote! {AId::StrokeLinecap},
            AId::StrokeLinejoin => quote! {AId::StrokeLinejoin},
            AId::StrokeMiterlimit => quote! {AId::StrokeMiterlimit},
            AId::StrokeOpacity => quote! {AId::StrokeOpacity},
            AId::StrokeWidth => quote! {AId::StrokeWidth},
            AId::Style => quote! {AId::Style},
            AId::SurfaceScale => quote! {AId::SurfaceScale},
            AId::SystemLanguage => quote! {AId::SystemLanguage},
            AId::TableValues => quote! {AId::TableValues},
            AId::TargetX => quote! {AId::TargetX},
            AId::TargetY => quote! {AId::TargetY},
            AId::TextAlign => quote! {AId::TextAlign},
            AId::TextAlignLast => quote! {AId::TextAlignLast},
            AId::TextAnchor => quote! {AId::TextAnchor},
            AId::TextDecoration => quote! {AId::TextDecoration},
            AId::TextDecorationColor => quote! {AId::TextDecorationColor},
            AId::TextDecorationFill => quote! {AId::TextDecorationFill},
            AId::TextDecorationLine => quote! {AId::TextDecorationLine},
            AId::TextDecorationStroke => quote! {AId::TextDecorationStroke},
            AId::TextDecorationStyle => quote! {AId::TextDecorationStyle},
            AId::TextIndent => quote! {AId::TextIndent},
            AId::TextOrientation => quote! {AId::TextOrientation},
            AId::TextOverflow => quote! {AId::TextOverflow},
            AId::TextRendering => quote! {AId::TextRendering},
            AId::TextUnderlinePosition => quote! {AId::TextUnderlinePosition},
            AId::TextLength => quote! {AId::TextLength},
            AId::Transform => quote! {AId::Transform},
            AId::TransformBox => quote! {AId::TransformBox},
            AId::TransformOrigin => quote! {AId::TransformOrigin},
            AId::Type => quote! {AId::Type},
            AId::UnicodeBidi => quote! {AId::UnicodeBidi},
            AId::UnicodeRange => quote! {AId::UnicodeRange},
            AId::Values => quote! {AId::Values},
            AId::VectorEffect => quote! {AId::VectorEffect},
            AId::ViewBox => quote! {AId::ViewBox},
            AId::Visibility => quote! {AId::Visibility},
            AId::WhiteSpace => quote! {AId::WhiteSpace},
            AId::Width => quote! {AId::Width},
            AId::WordSpacing => quote! {AId::WordSpacing},
            AId::WritingMode => quote! {AId::WritingMode},
            AId::X => quote! {AId::X},
            AId::X1 => quote! {AId::X1},
            AId::X2 => quote! {AId::X2},
            AId::XChannelSelector => quote! {AId::XChannelSelector},
            AId::Y => quote! {AId::Y},
            AId::Y1 => quote! {AId::Y1},
            AId::Y2 => quote! {AId::Y2},
            AId::YChannelSelector => quote! {AId::YChannelSelector},
            AId::Z => quote! {AId::Z},
        }
        .to_tokens(tokens)
    }
}

static ATTRIBUTES: Map<AId> = Map {
    key: 732231254413039614,
    disps: &[
        (0, 103),
        (1, 31),
        (0, 1),
        (0, 2),
        (0, 31),
        (3, 20),
        (0, 164),
        (0, 97),
        (0, 2),
        (0, 4),
        (0, 12),
        (0, 166),
        (0, 1),
        (4, 174),
        (2, 158),
        (0, 13),
        (0, 18),
        (0, 0),
        (0, 138),
        (7, 16),
        (1, 100),
        (5, 19),
        (10, 59),
        (0, 5),
        (0, 146),
        (0, 44),
        (0, 72),
        (0, 26),
        (0, 1),
        (3, 147),
        (0, 7),
        (0, 11),
        (0, 10),
        (5, 91),
        (0, 74),
        (4, 37),
        (0, 138),
        (0, 3),
        (6, 164),
    ],
    entries: &[
        ("color-interpolation", AId::ColorInterpolation),
        ("id", AId::Id),
        ("inline-size", AId::InlineSize),
        ("flood-opacity", AId::FloodOpacity),
        ("kernelMatrix", AId::KernelMatrix),
        ("font-stretch", AId::FontStretch),
        ("mask", AId::Mask),
        ("order", AId::Order),
        ("kerning", AId::Kerning),
        ("font-size-adjust", AId::FontSizeAdjust),
        ("limitingConeAngle", AId::LimitingConeAngle),
        ("azimuth", AId::Azimuth),
        ("k4", AId::K4),
        ("fill", AId::Fill),
        ("intercept", AId::Intercept),
        ("text-align-last", AId::TextAlignLast),
        ("text-decoration-fill", AId::TextDecorationFill),
        ("textLength", AId::TextLength),
        ("patternUnits", AId::PatternUnits),
        ("space", AId::Space),
        ("side", AId::Side),
        ("line-height", AId::LineHeight),
        ("stroke-linejoin", AId::StrokeLinejoin),
        ("xChannelSelector", AId::XChannelSelector),
        ("kernelUnitLength", AId::KernelUnitLength),
        ("k3", AId::K3),
        ("font-feature-settings", AId::FontFeatureSettings),
        ("fill-opacity", AId::FillOpacity),
        ("transform-box", AId::TransformBox),
        ("lengthAdjust", AId::LengthAdjust),
        ("marker-end", AId::MarkerEnd),
        ("y1", AId::Y1),
        ("specularExponent", AId::SpecularExponent),
        ("direction", AId::Direction),
        ("stroke-linecap", AId::StrokeLinecap),
        ("display", AId::Display),
        ("text-overflow", AId::TextOverflow),
        ("text-decoration-color", AId::TextDecorationColor),
        ("transform-origin", AId::TransformOrigin),
        ("lighting-color", AId::LightingColor),
        ("systemLanguage", AId::SystemLanguage),
        ("pointsAtZ", AId::PointsAtZ),
        ("cy", AId::Cy),
        ("k2", AId::K2),
        ("specularConstant", AId::SpecularConstant),
        ("tableValues", AId::TableValues),
        ("dominant-baseline", AId::DominantBaseline),
        ("stroke-width", AId::StrokeWidth),
        ("dx", AId::Dx),
        ("font-variant-caps", AId::FontVariantCaps),
        ("shape-subtract", AId::ShapeSubtract),
        ("shape-image-threshold", AId::ShapeImageThreshold),
        ("gradientTransform", AId::GradientTransform),
        ("pointsAtX", AId::PointsAtX),
        ("cx", AId::Cx),
        ("filterUnits", AId::FilterUnits),
        ("image-rendering", AId::ImageRendering),
        ("fx", AId::Fx),
        ("gradientUnits", AId::GradientUnits),
        ("text-orientation", AId::TextOrientation),
        ("exponent", AId::Exponent),
        ("rotate", AId::Rotate),
        ("d", AId::D),
        ("mix-blend-mode", AId::MixBlendMode),
        ("rx", AId::Rx),
        ("text-rendering", AId::TextRendering),
        (
            "glyph-orientation-horizontal",
            AId::GlyphOrientationHorizontal,
        ),
        ("enable-background", AId::EnableBackground),
        ("scale", AId::Scale),
        ("in", AId::In),
        ("font-variant-numeric", AId::FontVariantNumeric),
        ("font-variant-east-asian", AId::FontVariantEastAsian),
        ("text-anchor", AId::TextAnchor),
        ("glyph-orientation-vertical", AId::GlyphOrientationVertical),
        ("dy", AId::Dy),
        (
            "color-interpolation-filters",
            AId::ColorInterpolationFilters,
        ),
        ("clip-rule", AId::ClipRule),
        ("stroke-miterlimit", AId::StrokeMiterlimit),
        ("isolation", AId::Isolation),
        ("transform", AId::Transform),
        ("stroke-dashoffset", AId::StrokeDashoffset),
        ("z", AId::Z),
        ("refX", AId::RefX),
        ("width", AId::Width),
        ("requiredExtensions", AId::RequiredExtensions),
        ("font-synthesis", AId::FontSynthesis),
        ("radius", AId::Radius),
        ("white-space", AId::WhiteSpace),
        ("patternTransform", AId::PatternTransform),
        ("maskContentUnits", AId::MaskContentUnits),
        ("stop-color", AId::StopColor),
        ("amplitude", AId::Amplitude),
        ("visibility", AId::Visibility),
        ("yChannelSelector", AId::YChannelSelector),
        ("color-rendering", AId::ColorRendering),
        ("diffuseConstant", AId::DiffuseConstant),
        ("stroke", AId::Stroke),
        ("text-decoration-style", AId::TextDecorationStyle),
        ("y2", AId::Y2),
        ("operator", AId::Operator),
        ("font-variant", AId::FontVariant),
        ("clip-path", AId::ClipPath),
        ("edgeMode", AId::EdgeMode),
        ("text-indent", AId::TextIndent),
        ("numOctaves", AId::NumOctaves),
        ("font-size", AId::FontSize),
        ("alignment-baseline", AId::AlignmentBaseline),
        ("stroke-opacity", AId::StrokeOpacity),
        ("class", AId::Class),
        ("refY", AId::RefY),
        ("stitchTiles", AId::StitchTiles),
        ("x2", AId::X2),
        ("unicode-bidi", AId::UnicodeBidi),
        ("targetY", AId::TargetY),
        ("vector-effect", AId::VectorEffect),
        ("fy", AId::Fy),
        ("clipPathUnits", AId::ClipPathUnits),
        ("href", AId::Href),
        ("x1", AId::X1),
        ("result", AId::Result),
        ("fill-rule", AId::FillRule),
        ("color-profile", AId::ColorProfile),
        ("font", AId::Font),
        ("font-weight", AId::FontWeight),
        ("shape-padding", AId::ShapePadding),
        ("primitiveUnits", AId::PrimitiveUnits),
        ("height", AId::Height),
        ("bias", AId::Bias),
        ("maskUnits", AId::MaskUnits),
        ("pointsAtY", AId::PointsAtY),
        ("paint-order", AId::PaintOrder),
        ("text-decoration-line", AId::TextDecorationLine),
        ("preserveAlpha", AId::PreserveAlpha),
        ("shape-rendering", AId::ShapeRendering),
        ("text-underline-position", AId::TextUnderlinePosition),
        ("stroke-dasharray", AId::StrokeDasharray),
        ("ry", AId::Ry),
        ("preserveAspectRatio", AId::PreserveAspectRatio),
        ("markerWidth", AId::MarkerWidth),
        ("letter-spacing", AId::LetterSpacing),
        ("font-variant-position", AId::FontVariantPosition),
        ("y", AId::Y),
        ("style", AId::Style),
        ("requiredFeatures", AId::RequiredFeatures),
        ("text-align", AId::TextAlign),
        ("divisor", AId::Divisor),
        ("offset", AId::Offset),
        ("overflow", AId::Overflow),
        ("font-kerning", AId::FontKerning),
        ("slope", AId::Slope),
        ("marker-mid", AId::MarkerMid),
        ("mode", AId::Mode),
        ("x", AId::X),
        ("elevation", AId::Elevation),
        ("k1", AId::K1),
        ("startOffset", AId::StartOffset),
        ("clip", AId::Clip),
        ("surfaceScale", AId::SurfaceScale),
        ("points", AId::Points),
        ("targetX", AId::TargetX),
        ("text-decoration", AId::TextDecoration),
        ("font-style", AId::FontStyle),
        ("seed", AId::Seed),
        ("stop-opacity", AId::StopOpacity),
        ("values", AId::Values),
        ("stdDeviation", AId::StdDeviation),
        ("spreadMethod", AId::SpreadMethod),
        ("flood-color", AId::FloodColor),
        ("color", AId::Color),
        ("shape-inside", AId::ShapeInside),
        ("marker-start", AId::MarkerStart),
        ("text-decoration-stroke", AId::TextDecorationStroke),
        ("patternContentUnits", AId::PatternContentUnits),
        ("word-spacing", AId::WordSpacing),
        ("orient", AId::Orient),
        ("in2", AId::In2),
        ("unicode-range", AId::UnicodeRange),
        ("opacity", AId::Opacity),
        ("baseFrequency", AId::BaseFrequency),
        ("path", AId::Path),
        ("markerHeight", AId::MarkerHeight),
        ("pathLength", AId::PathLength),
        ("r", AId::R),
        ("writing-mode", AId::WritingMode),
        ("shape-margin", AId::ShapeMargin),
        ("viewBox", AId::ViewBox),
        ("font-family", AId::FontFamily),
        ("filter", AId::Filter),
        ("markerUnits", AId::MarkerUnits),
        ("type", AId::Type),
        ("baseline-shift", AId::BaselineShift),
        ("font-variant-ligatures", AId::FontVariantLigatures),
    ],
};

pub fn attributes_list() -> Vec<&'static str> {
    ATTRIBUTES.entries.iter().map(|(name, _)| *name).collect()
}

impl AId {
    pub fn from_str(text: &str) -> Option<AId> {
        ATTRIBUTES.get(text).cloned()
    }

    #[inline(never)]
    pub fn to_str(self) -> &'static str {
        ATTRIBUTES.key(&self)
    }
}

impl fmt::Debug for AId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{}", self.to_str())
    }
}

impl fmt::Display for AId {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "{:?}", self)
    }
}

// A stripped down `phf` crate fork.
//
// https://github.com/sfackler/rust-phf

struct Map<V: 'static> {
    pub key: u64,
    pub disps: &'static [(u32, u32)],
    pub entries: &'static [(&'static str, V)],
}

impl<V: PartialEq> Map<V> {
    fn get(&self, key: &str) -> Option<&V> {
        let hash = hash(key, self.key);
        let index = get_index(hash, self.disps, self.entries.len());
        let entry = &self.entries[index as usize];
        let b = entry.0;
        if b == key {
            Some(&entry.1)
        } else {
            None
        }
    }

    fn key(&self, value: &V) -> &'static str {
        self.entries.iter().find(|kv| kv.1 == *value).unwrap().0
    }
}

#[inline]
fn hash(x: &str, key: u64) -> u64 {
    use std::hash::Hasher;

    let mut hasher = siphasher::sip::SipHasher13::new_with_keys(0, key);
    hasher.write(x.as_bytes());
    hasher.finish()
}

#[inline]
fn get_index(hash: u64, disps: &[(u32, u32)], len: usize) -> u32 {
    let (g, f1, f2) = split(hash);
    let (d1, d2) = disps[(g % (disps.len() as u32)) as usize];
    displace(f1, f2, d1, d2) % (len as u32)
}

#[inline]
fn split(hash: u64) -> (u32, u32, u32) {
    const BITS: u32 = 21;
    const MASK: u64 = (1 << BITS) - 1;

    (
        (hash & MASK) as u32,
        ((hash >> BITS) & MASK) as u32,
        ((hash >> (2 * BITS)) & MASK) as u32,
    )
}

#[inline]
fn displace(f1: u32, f2: u32, d1: u32, d2: u32) -> u32 {
    d2 + f1 * d1 + f2
}
